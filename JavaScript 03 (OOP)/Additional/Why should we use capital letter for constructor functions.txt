JavaScript - Why should we use capital letter for the class constructor function 

-------------------

http://www.jshint.com/docs/options/#newcap
This option requires you to capitalize names of constructor functions. Capitalizing functions that are intended to be used with new operator is just a convention that helps programmers to visually distinguish constructor functions from other types of functions to help spot mistakes when using this.

Not doing so won't break your code in any browsers or environments but it will be a bit harder to figure out—by reading the code—if the function was supposed to be used with or without new. And this is important because when the function that was intended to be used with new is used without it, this will point to the global object instead of a new object.

----------------------------------------------

Code Conventions for the JavaScript Programming Language (Douglas Crockford)

Constructor functions that must be used with the new prefix should start with a capital letter. JavaScript issues neither a compile-time warning nor a run-time warning if a required new is omitted. Bad things can happen if new is not used, so the capitalization convention is the only defense we have. 

Ref: http://javascript.crockford.com/code.html
----------------------------------------------

Book: JavaScript - The Good Parts (Douglas Crockford, 2008), page 114: 

new
JavaScript’s new operator creates a new object that inherits from the operand’s prototype member, and then calls the operand, binding the new object to this. This gives the operand (which had better be a constructor function) a chance to customize the new object before it is returned to the requestor. If you forget to use the new operator, you instead get an ordinary function call, and this is bound to the global object instead of to a new object. That means that your function will be clobbering global variables when it attempts to initialize the new members. That is a very bad thing. There is no compile-time warning. There is no runtime warning.

By convention, functions that are intended to be used with new should be given names with initial capital letters, and names with initial capital letters should be used only with constructor functions that take the new prefix. This convention gives us a visual cue that can help spot expensive mistakes that the language itself is keen to overlook. An even better coping strategy is to not use new at all.

------------------------------------------------
My Personal Note: 
The code convention that the constructor function should start with capital letter is accepted, so that programmers could distinguish it from other types of functions and always use the "new" keyword with constructor functions. If the "new" keyword is ommitted when assiging constructor function to variable then the scope of the function "this" becomes the global scope which is a bad thing. For more information, see: http://www.jshint.com/docs/options/#newcap.  

----------------------------------------------


Code Example - Function constructor without new: 

function Rect(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
}

Rect.prototype.calcArea = function () {
    return this.width * this.height;
};
Rect.prototype.calcPerimeter = function () {
    return 2 * this.width + 2 * this.height;
};

var realRect = new Rect(45, 85, 55, 90);
var badRect = Rect(45, 85, 55, 90);

console.log('With new: ' + realRect.calcArea());
//throws exceptions because badRect is undefined
console.log('Without new: ' + badRect.calcArea());

-------------


The code above brings error message:

With new: 4950

console.log('Without new: ' + badRect.calcArea());
TypeError: Cannot call method 'calcArea' of undefined


--------------

Function constructor fix (John Resig): 

function Person(name, age) {
    if (!(this instanceof arguments.callee)) {
        return new Person(name, age);
    }
    this.name = name;
    this.age = age;
}


var p1 = new Person('With new', 12);
var p3 = new Person('With new 2', 12);
var p2 = Person('Withoud new', 13);
console.log(p1);

console.log(p2);


console.log(p3);