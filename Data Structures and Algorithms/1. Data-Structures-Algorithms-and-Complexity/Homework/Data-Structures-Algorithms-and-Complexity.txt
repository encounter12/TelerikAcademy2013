Problem 1. What is the expected running time of the following C# code? Explain why. Assume the array's size is n.

long Compute(int[] arr)
{
    long count = 0;
    for (int i=0; i<arr.Length; i++)
    {
        int start = 0, end = arr.Length-1;
        while (start < end)
            if (arr[start] < arr[end])
                { start++; count++; }
            else 
                end--;
    }
    return count;
}



n - for the outer for loop 
(n - 1) / 2 - the average count for the while loop

n * [(n - 1) / 2] = n * (n/2 - 1/2) = n^2 / 2 - n/2 ~ n^2/2 ~ n^2 


Algorithm Complexity:
    O(n^2);

-------------------------------------------

Problem 2. What is the expected running time of the following C# code? Explain why. Assume the input matrix has size of n * m.


long CalcCount(int[,] matrix)
{
    long count = 0;
    for (int row=0; row<matrix.GetLength(0); row++)
        if (matrix[row, 0] % 2 == 0)
            for (int col=0; col<matrix.GetLength(1); col++)
                if (matrix[row,col] > 0)
                    count++;
    return count;
}



Algorithm Complexity:

x - the probability for the 1st element on each row to be even
y - the probability for the n-th element on specific row to be greater than 0 


(1 - x) * n + [(x * n) * (m * y)] = (1 - x) * n + (x * n) * (y * m) = (1 - x) * n + x * y * m * n = n * ((1-x) + x*y*m) = n * (const1 + const2 * m) ~ n*m


O(n*m);


-------------------------------------------

Problem 3. * What is the expected running time of the following C# code? Explain why.


matrix.GetLength(0) = n
matrix.GetLength(1) = m

long CalcSum(int[,] matrix, int row)
{
    long sum = 0;
    for (int col = 0; col < matrix.GetLength(0); col++)
    {
        sum += matrix[row, col];
    }
    
    if (row + 1 < matrix.GetLength(1))
    {
        sum += CalcSum(matrix, row + 1);
    }
    
    return sum;
}


Algorithm Complexity:

    Approximately O(N * M) -> with remark â†’ O(N ^ 2) because N = M
    

Explanation:

    The matrix is considered to be with size: N * M.
    For each recursive call, the for loop is being executed exactly N times. The number of recursive calls is M. 

Remarks:

    The function works only when: N = M, if the matrix dimensions are not equal the function behavior is not correct.
